package ${controllerPackage};

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.youedata.base.factory.PageFactory;
import com.youedata.base.tips.DCResponse;
import ${package.Entity}.${entity};
import ${package.EntitySpecParams}.${entity}DTO;
import ${package.Service}.${table.serviceName};
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.BeanUtils;
import org.springframework.web.bind.annotation.*;


/**
 * ${tool.cleanWhite(table.comment)}控制器
 *
 * @author ${author}
 * @date ${tool.currentTime()}
 */
@RestController
@Api(value = "/${tool.lowerFirst(entity)}", tags = "${tool.cleanWhite(table.comment)}管理")
@RequestMapping("/${tool.lowerFirst(entity)}")
public class ${entity}Controller {

    <% var lowerEntity = tool.lowerFirst(entity); %>
    <% var lowerEntityService = lowerEntity + 'Service'; %>
    @Autowired
    private ${table.serviceName} ${lowerEntityService};

    /**
     * 新增
     *
     * @author ${author}
     * @date ${date}
     */
    @PostMapping("/add")
    @ApiOperation(value = "新增")
    public DCResponse<Void> add(@RequestBody ${entity}DTO ${lowerEntity}Dto) {
        ${entity} ${lowerEntity} = new ${entity}();
        BeanUtils.copyProperties(${lowerEntity}Dto, ${lowerEntity});
        this.${lowerEntityService}.save(${lowerEntity});
        return DCResponse.ok(null);
    }

    /**
     * 根据主键删除
     *
     * @author ${author}
     * @date ${date}
     */
    @DeleteMapping("/deleteById")
    @ApiOperation("删除")
    public DCResponse<Void> deleteById(@RequestParam("id") String id) {
        this.${lowerEntityService}.removeById(id);
        return DCResponse.ok(null);
    }

    /**
     * 修改
     *
     * @author ${author}
     * @date ${date}
     */
    @PutMapping("/updateById")
    @ApiOperation("根据ID修改信息")
    public DCResponse<Void> updateById(@RequestBody ${entity}DTO ${lowerEntity}Dto) {
       ${entity} ${lowerEntity} = new ${entity}();
       BeanUtils.copyProperties(${lowerEntity}Dto, ${lowerEntity});
       this.${lowerEntityService}.updateById(${lowerEntity});
       return DCResponse.ok(null);
    }

    /**
     * 根据主键查询单条详情
     *
     * @author ${author}
     * @date ${date}
     */
    @GetMapping("/queryDetailById")
    @ApiOperation(value = "根据主键查询单条详情")
    public DCResponse<${entity}> getById(@RequestParam("id") String id) {
        return DCResponse.ok(this.${lowerEntityService}.getById(id));
    }

    /**
     * 分页查询列表
     *
     * @author ${author}
     * @date ${date}
     */
    @PostMapping("/queryListPage")
    @ApiOperation(value = "分页查询列表")
    @ApiImplicitParams({
        @ApiImplicitParam(name = "pageNum", value = "当前页码", required = true, defaultValue = "1", paramType = "query", dataType = "int", example = "1"),
        @ApiImplicitParam(name = "pageSize", value = "每页多少条数据", required = true, defaultValue = "10", paramType = "query", dataType = "int", example = "20")
    })
    public DCResponse<Page<${entity}>> queryListPage(@RequestBody ${entity}DTO ${lowerEntity}Dto) {
        ${entity} ${lowerEntity} = new ${entity}();
        BeanUtils.copyProperties(${lowerEntity}Dto, ${lowerEntity});
        Page<${entity}> page = PageFactory.defaultPage();
        return DCResponse.ok((Page<${entity}>) this.${lowerEntityService}.page(page,Wrappers.query(${lowerEntity})));
    }

}
